// Learn more at developers.reddit.com/docs
import { Devvit, useState, useChannel, useInterval, useAsync } from '@devvit/public-api';
import { DECK } from './deck.js';
import { getCardName, getLastFiveCards, getCard, shuffle, calcPlus, calcScore } from './utilities.js';

const DEBOUNCE_DELAY = 1000;

type Payload = {
  card: string;
  drawnCards: string[];
  totalCurrCards: number;
  currDeck: string[];
  plus: number;
  reset: boolean;
  maxTotal: number;
};

type RealtimeMessage = {
  payload: Payload;
  session: string;
  // avoid losing data after reloading
  postId: string;
};

enum PageType {
  HOMEPAGE,
  COUNTPAGE,
}


const App: Devvit.CustomPostComponent = (context) => {
  const [page, navigate] = useState(PageType.HOMEPAGE);

  const props = {
    navigate,
    context,
  };

  if (page === PageType.COUNTPAGE) {
    return <CountPage {...props} />;
  } else {
    return <HomePage {...props} />;
  }
};


interface Props {
  navigate: (page: PageType) => void;
  context: Devvit.Context;
}

function sessionId(): string {
  let id = '';
  const asciiZero = '0'.charCodeAt(0);
  for (let i = 0; i < 4; i++) {
    id += String.fromCharCode(Math.floor(Math.random() * 26) + asciiZero);
  }
  return id;
}

Devvit.configure({
  redditAPI: true,
  realtime: true,
  redis: true,
});


async function getPostData(context: Devvit.Context, myPostId: string){
  const [currCard, drawnCards, totalCurrCards, currDeck, plus, score, reset, maxTotal] = await
  context.redis.mGet([
    `${myPostId}$currCard`,
    `${myPostId}$drawnCards`,
    `${myPostId}$totalCurrCards`,
    `${myPostId}$currDeck`,
    `${myPostId}$plus`,
    `${myPostId}$score`,
    `${myPostId}$reset`,
    `${myPostId}$maxTotal`,
  ]);
  const parseCurrCard = currCard ?? 'back.png';
  const parseDrawnCards = JSON.parse(drawnCards ?? '[]');
  const parseTotal = parseInt(totalCurrCards ?? '0');
  const parseCurrDeck = JSON.parse(currDeck ?? '[]');
  const parsePlus = parseInt(plus ?? '1');
  const parseScore = parseInt(score ?? '0');
  const parseReset = Boolean(reset);
  const parseMaxTotal = parseInt(maxTotal ?? '0');

  return {
    parseCurrCard,
    parseDrawnCards,
    parseTotal,
    parseCurrDeck,
    parsePlus,
    parseScore, 
    parseReset,
    parseMaxTotal
  }
}

const HomePage: Devvit.BlockComponent<{ navigate: (page: PageType) => void }> = ({ navigate }, context)  => {
  const { postId } = context;
  const mySession = sessionId();
  const myPostId = postId ?? 'defaultPostId'; 

  // async function fetchDataAndUpdate() {
  //   const data = await getPostData(context, myPostId);
  //   setCard(data.parseCurrCard);
  //   setCards(data.parseDrawnCards);
  //   setTotal(data.parseTotal);
  //   setDeck(data.parseCurrDeck);
  //   setPlus(data.parsePlus);
  //   setScore(data.parseScore);
  //   setReset(data.parseReset);
  //   setMaxTotal(data.parseMaxTotal);
  // };

  // fetchDataAndUpdate();

  function updateVars(currCard: string, drawnCards: string[], totalCurrCards: number, currDeck: string[],
    plus: number, reset: boolean, maxTotal: number){
      setCard(currCard);
      setCards(drawnCards);
      setTotal(totalCurrCards);
      setDeck(currDeck);
      setPlus(plus);
      setReset(reset);
      setMaxTotal(maxTotal);
  }

  const [currCard, setCard] = useState('back.png');
  const [drawnCards, setCards] = useState<string[]>([]);;
  const [totalCurrCards, setTotal] = useState(0);
  const [currDeck, setDeck] = useState(shuffle([...DECK]));
  const [plus, setPlus] = useState(1);
  const [score, setScore] = useState(0);
  const [reset, setReset] = useState(false);
  const [maxTotal, setMaxTotal] = useState(0);

  // Variables for delaying the button
  const [lastClickTime, setLastClickTime] = useState(0);
  const [isDebouncing, setIsDebouncing] = useState(false);
  const DEBOUNCE_DELAY = 1000; 


  const countPage: Devvit.Blocks.OnPressEventHandler = () => {
    navigate(PageType.COUNTPAGE);
  };



  const channel = useChannel<RealtimeMessage>({
    name: 'events',
    onMessage: (msg) => {
      if (msg.session === mySession || msg.postId !== myPostId) {
        //Ignore my updates b/c they have already been rendered
        return;
      }
      const payload = msg.payload;
      updateVars(payload.card, payload.drawnCards, payload.totalCurrCards,
        payload.currDeck, payload.plus, payload.reset, payload.maxTotal);
    },
  });

  channel.subscribe();

  


  // Add delay to the button to avoid spamming
  const updateInterval = useInterval(() => {
    const now = Date.now();
    setIsDebouncing(now - lastClickTime <= DEBOUNCE_DELAY);
  }, 100).start();

  const handleClick = async () => {
    const now = Date.now();
    setLastClickTime(now);
    setIsDebouncing(true);
    
    // Logic for drawing a card
    const { updatedCard, updatedDeck, updatedDrawnCards, updatedTotal, updatedScore, updatedReset, updatedMax } = getCard(currDeck, drawnCards, totalCurrCards, score, reset, maxTotal);
    setScore(updatedScore);
    const payload: Payload = { card: updatedCard, drawnCards: updatedDrawnCards, totalCurrCards: updatedTotal, currDeck: updatedDeck, plus: calcPlus(updatedTotal), reset: updatedReset, maxTotal: updatedMax};
    const message: RealtimeMessage = { payload, session: mySession, postId: myPostId };

    // Send the message with the payload
    await channel.send(message);
    // await context.redis.mSet({
    //   [`${myPostId}$currCard`]: payload.card,
    //   [`${myPostId}$drawnCards`]: JSON.stringify(payload.drawnCards),
    //   [`${myPostId}$totalCurrCards`]: payload.totalCurrCards.toString(),
    //   [`${myPostId}$currDeck`]: JSON.stringify(payload.currDeck),
    //   [`${myPostId}$plus`]: payload.plus.toString(),
    //   [`${myPostId}$reset`]: payload.reset.toString(),
    //   [`${myPostId}$score`]: updatedScore.toString(),
    //   [`${myPostId}$reset`]: payload.reset.toString(),
    //   [`${myPostId}$maxTotal`]: payload.maxTotal.toString(),
    // });
  };
  return (
    <zstack width='100%' height='100%'>
      <image 
      url='background.png'
      imageHeight={512}
      imageWidth={720}
      resizeMode='cover'
      />
      
      <vstack height="100%" width="100%" gap="medium" alignment="center middle">
        <image
          url={currCard?.toString() || 'back.png'}
          description="card"
          imageHeight={384}
          imageWidth={384}
          height="300px"
          width="300px"
        />

        <text size="large" color='black'>Remaining cards: {currDeck.length}</text>
        <text size="large" color='black'>Total current cards: {totalCurrCards} - Plus: {calcPlus(totalCurrCards)}</text>
        <text color='black' size="large">{`Last 5 cards: ${getLastFiveCards(drawnCards)}`}</text>
        <text color='black' size="xxlarge">{`Score: ${score}`}</text>
        <hstack gap='medium'>
          <button appearance='primary'>Rules</button>
          <button onPress={handleClick} disabled={isDebouncing} appearance='primary'>
            Draw!
          </button>
          <button appearance='primary' onPress={countPage}>Leaderboard</button>
        </hstack>
      </vstack>
    </zstack>
  )
};



const CountPage: Devvit.BlockComponent<Props> = ({ navigate}) => {
  // Your CountPage logic here
  return (
    <vstack>
      <text>This is the CountPage</text>
      <button onPress={() => navigate(PageType.HOMEPAGE)}>Go back to HomePage</button>
    </vstack>
  );
};

// Add a menu item to the subreddit menu for instantiating the new experience post
Devvit.addMenuItem({
  label: 'Add new game',
  location: 'subreddit',
  forUserType: 'moderator',
  onPress: async (_event, context) => {
    const { reddit, ui } = context;
    const subreddit = await reddit.getCurrentSubreddit();
    await reddit.submitPost({
      title: 'EXPLODING DECK üí£üÉè',
      subredditName: subreddit.name,
      // The preview appears while the post loads
      preview: (
        <vstack height="100%" width="100%" alignment="middle center">
          <text size="large">Loading ...</text>
        </vstack>
      ),
    });
    ui.showToast({ text: 'Created post!' });
  },
});

// Add a post type definition
Devvit.addCustomPostType({
  name: 'EXPLODING DECK',
  height: 'tall',
  description: 'Play and explode!',
  render: App,
});

export default Devvit;
